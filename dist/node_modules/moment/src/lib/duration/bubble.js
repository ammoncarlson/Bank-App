"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const abs_floor_1 = require("../utils/abs-floor");
const abs_ceil_1 = require("../utils/abs-ceil");
function bubble() {
    var milliseconds = this._milliseconds;
    var days = this._days;
    var months = this._months;
    var data = this._data;
    var seconds, minutes, hours, years, monthsFromDays;
    // if we have a mix of positive and negative values, bubble down first
    // check: https://github.com/moment/moment/issues/2166
    if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
        (milliseconds <= 0 && days <= 0 && months <= 0))) {
        milliseconds += abs_ceil_1.default(monthsToDays(months) + days) * 864e5;
        days = 0;
        months = 0;
    }
    // The following code bubbles up values, see the tests for
    // examples of what that means.
    data.milliseconds = milliseconds % 1000;
    seconds = abs_floor_1.default(milliseconds / 1000);
    data.seconds = seconds % 60;
    minutes = abs_floor_1.default(seconds / 60);
    data.minutes = minutes % 60;
    hours = abs_floor_1.default(minutes / 60);
    data.hours = hours % 24;
    days += abs_floor_1.default(hours / 24);
    // convert days to months
    monthsFromDays = abs_floor_1.default(daysToMonths(days));
    months += monthsFromDays;
    days -= abs_ceil_1.default(monthsToDays(monthsFromDays));
    // 12 months -> 1 year
    years = abs_floor_1.default(months / 12);
    months %= 12;
    data.days = days;
    data.months = months;
    data.years = years;
    return this;
}
exports.bubble = bubble;
function daysToMonths(days) {
    // 400 years have 146097 days (taking into account leap year rules)
    // 400 years have 12 months === 4800
    return days * 4800 / 146097;
}
exports.daysToMonths = daysToMonths;
function monthsToDays(months) {
    // the reverse of daysToMonths
    return months * 146097 / 4800;
}
exports.monthsToDays = monthsToDays;
//# sourceMappingURL=bubble.js.map