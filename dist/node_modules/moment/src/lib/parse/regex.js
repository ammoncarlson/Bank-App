"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.match1 = /\d/; //       0 - 9
exports.match2 = /\d\d/; //      00 - 99
exports.match3 = /\d{3}/; //     000 - 999
exports.match4 = /\d{4}/; //    0000 - 9999
exports.match6 = /[+-]?\d{6}/; // -999999 - 999999
exports.match1to2 = /\d\d?/; //       0 - 99
exports.match3to4 = /\d\d\d\d?/; //     999 - 9999
exports.match5to6 = /\d\d\d\d\d\d?/; //   99999 - 999999
exports.match1to3 = /\d{1,3}/; //       0 - 999
exports.match1to4 = /\d{1,4}/; //       0 - 9999
exports.match1to6 = /[+-]?\d{1,6}/; // -999999 - 999999
exports.matchUnsigned = /\d+/; //       0 - inf
exports.matchSigned = /[+-]?\d+/; //    -inf - inf
exports.matchOffset = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
exports.matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z
exports.matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123
// any word (or two) characters or numbers including two/three word month in arabic.
// includes scottish gaelic two word and hyphenated months
exports.matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;
const has_own_prop_1 = require("../utils/has-own-prop");
const is_function_1 = require("../utils/is-function");
var regexes = {};
function addRegexToken(token, regex, strictRegex) {
    regexes[token] = is_function_1.default(regex) ? regex : function (isStrict, localeData) {
        return (isStrict && strictRegex) ? strictRegex : regex;
    };
}
exports.addRegexToken = addRegexToken;
function getParseRegexForToken(token, config) {
    if (!has_own_prop_1.default(regexes, token)) {
        return new RegExp(unescapeFormat(token));
    }
    return regexes[token](config._strict, config._locale);
}
exports.getParseRegexForToken = getParseRegexForToken;
// Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
function unescapeFormat(s) {
    return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
        return p1 || p2 || p3 || p4;
    }));
}
function regexEscape(s) {
    return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
}
exports.regexEscape = regexEscape;
//# sourceMappingURL=regex.js.map