"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const get_set_1 = require("../moment/get-set");
const format_1 = require("../format/format");
const aliases_1 = require("./aliases");
const priorities_1 = require("./priorities");
const regex_1 = require("../parse/regex");
const token_1 = require("../parse/token");
const constants_1 = require("./constants");
const to_int_1 = require("../utils/to-int");
const zero_fill_1 = require("../utils/zero-fill");
const parsing_flags_1 = require("../create/parsing-flags");
// FORMATTING
function hFormat() {
    return this.hours() % 12 || 12;
}
function kFormat() {
    return this.hours() || 24;
}
format_1.addFormatToken('H', ['HH', 2], 0, 'hour');
format_1.addFormatToken('h', ['hh', 2], 0, hFormat);
format_1.addFormatToken('k', ['kk', 2], 0, kFormat);
format_1.addFormatToken('hmm', 0, 0, function () {
    return '' + hFormat.apply(this) + zero_fill_1.default(this.minutes(), 2);
});
format_1.addFormatToken('hmmss', 0, 0, function () {
    return '' + hFormat.apply(this) + zero_fill_1.default(this.minutes(), 2) +
        zero_fill_1.default(this.seconds(), 2);
});
format_1.addFormatToken('Hmm', 0, 0, function () {
    return '' + this.hours() + zero_fill_1.default(this.minutes(), 2);
});
format_1.addFormatToken('Hmmss', 0, 0, function () {
    return '' + this.hours() + zero_fill_1.default(this.minutes(), 2) +
        zero_fill_1.default(this.seconds(), 2);
});
function meridiem(token, lowercase) {
    format_1.addFormatToken(token, 0, 0, function () {
        return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
    });
}
meridiem('a', true);
meridiem('A', false);
// ALIASES
aliases_1.addUnitAlias('hour', 'h');
// PRIORITY
priorities_1.addUnitPriority('hour', 13);
// PARSING
function matchMeridiem(isStrict, locale) {
    return locale._meridiemParse;
}
regex_1.addRegexToken('a', matchMeridiem);
regex_1.addRegexToken('A', matchMeridiem);
regex_1.addRegexToken('H', regex_1.match1to2);
regex_1.addRegexToken('h', regex_1.match1to2);
regex_1.addRegexToken('k', regex_1.match1to2);
regex_1.addRegexToken('HH', regex_1.match1to2, regex_1.match2);
regex_1.addRegexToken('hh', regex_1.match1to2, regex_1.match2);
regex_1.addRegexToken('kk', regex_1.match1to2, regex_1.match2);
regex_1.addRegexToken('hmm', regex_1.match3to4);
regex_1.addRegexToken('hmmss', regex_1.match5to6);
regex_1.addRegexToken('Hmm', regex_1.match3to4);
regex_1.addRegexToken('Hmmss', regex_1.match5to6);
token_1.addParseToken(['H', 'HH'], constants_1.HOUR);
token_1.addParseToken(['k', 'kk'], function (input, array, config) {
    var kInput = to_int_1.default(input);
    array[constants_1.HOUR] = kInput === 24 ? 0 : kInput;
});
token_1.addParseToken(['a', 'A'], function (input, array, config) {
    config._isPm = config._locale.isPM(input);
    config._meridiem = input;
});
token_1.addParseToken(['h', 'hh'], function (input, array, config) {
    array[constants_1.HOUR] = to_int_1.default(input);
    parsing_flags_1.default(config).bigHour = true;
});
token_1.addParseToken('hmm', function (input, array, config) {
    var pos = input.length - 2;
    array[constants_1.HOUR] = to_int_1.default(input.substr(0, pos));
    array[constants_1.MINUTE] = to_int_1.default(input.substr(pos));
    parsing_flags_1.default(config).bigHour = true;
});
token_1.addParseToken('hmmss', function (input, array, config) {
    var pos1 = input.length - 4;
    var pos2 = input.length - 2;
    array[constants_1.HOUR] = to_int_1.default(input.substr(0, pos1));
    array[constants_1.MINUTE] = to_int_1.default(input.substr(pos1, 2));
    array[constants_1.SECOND] = to_int_1.default(input.substr(pos2));
    parsing_flags_1.default(config).bigHour = true;
});
token_1.addParseToken('Hmm', function (input, array, config) {
    var pos = input.length - 2;
    array[constants_1.HOUR] = to_int_1.default(input.substr(0, pos));
    array[constants_1.MINUTE] = to_int_1.default(input.substr(pos));
});
token_1.addParseToken('Hmmss', function (input, array, config) {
    var pos1 = input.length - 4;
    var pos2 = input.length - 2;
    array[constants_1.HOUR] = to_int_1.default(input.substr(0, pos1));
    array[constants_1.MINUTE] = to_int_1.default(input.substr(pos1, 2));
    array[constants_1.SECOND] = to_int_1.default(input.substr(pos2));
});
// LOCALES
function localeIsPM(input) {
    // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
    // Using charAt should be more compatible.
    return ((input + '').toLowerCase().charAt(0) === 'p');
}
exports.localeIsPM = localeIsPM;
exports.defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
function localeMeridiem(hours, minutes, isLower) {
    if (hours > 11) {
        return isLower ? 'pm' : 'PM';
    }
    else {
        return isLower ? 'am' : 'AM';
    }
}
exports.localeMeridiem = localeMeridiem;
// MOMENTS
// Setting the hour should keep the time, because the user explicitly
// specified which hour they want. So trying to maintain the same hour (in
// a new timezone) makes sense. Adding/subtracting hours does not follow
// this rule.
exports.getSetHour = get_set_1.makeGetSet('Hours', true);
//# sourceMappingURL=hour.js.map