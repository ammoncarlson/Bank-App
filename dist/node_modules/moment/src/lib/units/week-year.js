"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const format_1 = require("../format/format");
const aliases_1 = require("./aliases");
const priorities_1 = require("./priorities");
const regex_1 = require("../parse/regex");
const token_1 = require("../parse/token");
const week_calendar_utils_1 = require("./week-calendar-utils");
const to_int_1 = require("../utils/to-int");
const hooks_1 = require("../utils/hooks");
const date_from_array_1 = require("../create/date-from-array");
// FORMATTING
format_1.addFormatToken(0, ['gg', 2], 0, function () {
    return this.weekYear() % 100;
});
format_1.addFormatToken(0, ['GG', 2], 0, function () {
    return this.isoWeekYear() % 100;
});
function addWeekYearFormatToken(token, getter) {
    format_1.addFormatToken(0, [token, token.length], 0, getter);
}
addWeekYearFormatToken('gggg', 'weekYear');
addWeekYearFormatToken('ggggg', 'weekYear');
addWeekYearFormatToken('GGGG', 'isoWeekYear');
addWeekYearFormatToken('GGGGG', 'isoWeekYear');
// ALIASES
aliases_1.addUnitAlias('weekYear', 'gg');
aliases_1.addUnitAlias('isoWeekYear', 'GG');
// PRIORITY
priorities_1.addUnitPriority('weekYear', 1);
priorities_1.addUnitPriority('isoWeekYear', 1);
// PARSING
regex_1.addRegexToken('G', regex_1.matchSigned);
regex_1.addRegexToken('g', regex_1.matchSigned);
regex_1.addRegexToken('GG', regex_1.match1to2, regex_1.match2);
regex_1.addRegexToken('gg', regex_1.match1to2, regex_1.match2);
regex_1.addRegexToken('GGGG', regex_1.match1to4, regex_1.match4);
regex_1.addRegexToken('gggg', regex_1.match1to4, regex_1.match4);
regex_1.addRegexToken('GGGGG', regex_1.match1to6, regex_1.match6);
regex_1.addRegexToken('ggggg', regex_1.match1to6, regex_1.match6);
token_1.addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
    week[token.substr(0, 2)] = to_int_1.default(input);
});
token_1.addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
    week[token] = hooks_1.hooks.parseTwoDigitYear(input);
});
// MOMENTS
function getSetWeekYear(input) {
    return getSetWeekYearHelper.call(this, input, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);
}
exports.getSetWeekYear = getSetWeekYear;
function getSetISOWeekYear(input) {
    return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
}
exports.getSetISOWeekYear = getSetISOWeekYear;
function getISOWeeksInYear() {
    return week_calendar_utils_1.weeksInYear(this.year(), 1, 4);
}
exports.getISOWeeksInYear = getISOWeeksInYear;
function getWeeksInYear() {
    var weekInfo = this.localeData()._week;
    return week_calendar_utils_1.weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
}
exports.getWeeksInYear = getWeeksInYear;
function getSetWeekYearHelper(input, week, weekday, dow, doy) {
    var weeksTarget;
    if (input == null) {
        return week_calendar_utils_1.weekOfYear(this, dow, doy).year;
    }
    else {
        weeksTarget = week_calendar_utils_1.weeksInYear(input, dow, doy);
        if (week > weeksTarget) {
            week = weeksTarget;
        }
        return setWeekAll.call(this, input, week, weekday, dow, doy);
    }
}
function setWeekAll(weekYear, week, weekday, dow, doy) {
    var dayOfYearData = week_calendar_utils_1.dayOfYearFromWeeks(weekYear, week, weekday, dow, doy), date = date_from_array_1.createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
    this.year(date.getUTCFullYear());
    this.month(date.getUTCMonth());
    this.date(date.getUTCDate());
    return this;
}
//# sourceMappingURL=week-year.js.map