"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const zero_fill_1 = require("../utils/zero-fill");
const create_1 = require("../duration/create");
const add_subtract_1 = require("../moment/add-subtract");
const constructor_1 = require("../moment/constructor");
const format_1 = require("../format/format");
const regex_1 = require("../parse/regex");
const token_1 = require("../parse/token");
const local_1 = require("../create/local");
const from_anything_1 = require("../create/from-anything");
const utc_1 = require("../create/utc");
const is_date_1 = require("../utils/is-date");
const to_int_1 = require("../utils/to-int");
const is_undefined_1 = require("../utils/is-undefined");
const compare_arrays_1 = require("../utils/compare-arrays");
const hooks_1 = require("../utils/hooks");
// FORMATTING
function offset(token, separator) {
    format_1.addFormatToken(token, 0, 0, function () {
        var offset = this.utcOffset();
        var sign = '+';
        if (offset < 0) {
            offset = -offset;
            sign = '-';
        }
        return sign + zero_fill_1.default(~~(offset / 60), 2) + separator + zero_fill_1.default(~~(offset) % 60, 2);
    });
}
offset('Z', ':');
offset('ZZ', '');
// PARSING
regex_1.addRegexToken('Z', regex_1.matchShortOffset);
regex_1.addRegexToken('ZZ', regex_1.matchShortOffset);
token_1.addParseToken(['Z', 'ZZ'], function (input, array, config) {
    config._useUTC = true;
    config._tzm = offsetFromString(regex_1.matchShortOffset, input);
});
// HELPERS
// timezone chunker
// '+10:00' > ['10',  '00']
// '-1530'  > ['-15', '30']
var chunkOffset = /([\+\-]|\d\d)/gi;
function offsetFromString(matcher, string) {
    var matches = (string || '').match(matcher);
    if (matches === null) {
        return null;
    }
    var chunk = matches[matches.length - 1] || [];
    var parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
    var minutes = +(parts[1] * 60) + to_int_1.default(parts[2]);
    return minutes === 0 ?
        0 :
        parts[0] === '+' ? minutes : -minutes;
}
// Return a moment from input, that is local/utc/zone equivalent to model.
function cloneWithOffset(input, model) {
    var res, diff;
    if (model._isUTC) {
        res = model.clone();
        diff = (constructor_1.isMoment(input) || is_date_1.default(input) ? input.valueOf() : local_1.createLocal(input).valueOf()) - res.valueOf();
        // Use low-level api, because this fn is low-level api.
        res._d.setTime(res._d.valueOf() + diff);
        hooks_1.hooks.updateOffset(res, false);
        return res;
    }
    else {
        return local_1.createLocal(input).local();
    }
}
exports.cloneWithOffset = cloneWithOffset;
function getDateOffset(m) {
    // On Firefox.24 Date#getTimezoneOffset returns a floating point.
    // https://github.com/moment/moment/pull/1871
    return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
}
// HOOKS
// This function will be called whenever a moment is mutated.
// It is intended to keep the offset in sync with the timezone.
hooks_1.hooks.updateOffset = function () { };
// MOMENTS
// keepLocalTime = true means only change the timezone, without
// affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
// 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
// +0200, so we adjust the time as needed, to be valid.
//
// Keeping the time actually adds/subtracts (one hour)
// from the actual represented time. That is why we call updateOffset
// a second time. In case it wants us to change the offset again
// _changeInProgress == true case, then we have to adjust, because
// there is no such time in the given timezone.
function getSetOffset(input, keepLocalTime, keepMinutes) {
    var offset = this._offset || 0, localAdjust;
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }
    if (input != null) {
        if (typeof input === 'string') {
            input = offsetFromString(regex_1.matchShortOffset, input);
            if (input === null) {
                return this;
            }
        }
        else if (Math.abs(input) < 16 && !keepMinutes) {
            input = input * 60;
        }
        if (!this._isUTC && keepLocalTime) {
            localAdjust = getDateOffset(this);
        }
        this._offset = input;
        this._isUTC = true;
        if (localAdjust != null) {
            this.add(localAdjust, 'm');
        }
        if (offset !== input) {
            if (!keepLocalTime || this._changeInProgress) {
                add_subtract_1.addSubtract(this, create_1.createDuration(input - offset, 'm'), 1, false);
            }
            else if (!this._changeInProgress) {
                this._changeInProgress = true;
                hooks_1.hooks.updateOffset(this, true);
                this._changeInProgress = null;
            }
        }
        return this;
    }
    else {
        return this._isUTC ? offset : getDateOffset(this);
    }
}
exports.getSetOffset = getSetOffset;
function getSetZone(input, keepLocalTime) {
    if (input != null) {
        if (typeof input !== 'string') {
            input = -input;
        }
        this.utcOffset(input, keepLocalTime);
        return this;
    }
    else {
        return -this.utcOffset();
    }
}
exports.getSetZone = getSetZone;
function setOffsetToUTC(keepLocalTime) {
    return this.utcOffset(0, keepLocalTime);
}
exports.setOffsetToUTC = setOffsetToUTC;
function setOffsetToLocal(keepLocalTime) {
    if (this._isUTC) {
        this.utcOffset(0, keepLocalTime);
        this._isUTC = false;
        if (keepLocalTime) {
            this.subtract(getDateOffset(this), 'm');
        }
    }
    return this;
}
exports.setOffsetToLocal = setOffsetToLocal;
function setOffsetToParsedOffset() {
    if (this._tzm != null) {
        this.utcOffset(this._tzm, false, true);
    }
    else if (typeof this._i === 'string') {
        var tZone = offsetFromString(regex_1.matchOffset, this._i);
        if (tZone != null) {
            this.utcOffset(tZone);
        }
        else {
            this.utcOffset(0, true);
        }
    }
    return this;
}
exports.setOffsetToParsedOffset = setOffsetToParsedOffset;
function hasAlignedHourOffset(input) {
    if (!this.isValid()) {
        return false;
    }
    input = input ? local_1.createLocal(input).utcOffset() : 0;
    return (this.utcOffset() - input) % 60 === 0;
}
exports.hasAlignedHourOffset = hasAlignedHourOffset;
function isDaylightSavingTime() {
    return (this.utcOffset() > this.clone().month(0).utcOffset() ||
        this.utcOffset() > this.clone().month(5).utcOffset());
}
exports.isDaylightSavingTime = isDaylightSavingTime;
function isDaylightSavingTimeShifted() {
    if (!is_undefined_1.default(this._isDSTShifted)) {
        return this._isDSTShifted;
    }
    var c = {};
    constructor_1.copyConfig(c, this);
    c = from_anything_1.prepareConfig(c);
    if (c._a) {
        var other = c._isUTC ? utc_1.createUTC(c._a) : local_1.createLocal(c._a);
        this._isDSTShifted = this.isValid() &&
            compare_arrays_1.default(c._a, other.toArray()) > 0;
    }
    else {
        this._isDSTShifted = false;
    }
    return this._isDSTShifted;
}
exports.isDaylightSavingTimeShifted = isDaylightSavingTimeShifted;
function isLocal() {
    return this.isValid() ? !this._isUTC : false;
}
exports.isLocal = isLocal;
function isUtcOffset() {
    return this.isValid() ? this._isUTC : false;
}
exports.isUtcOffset = isUtcOffset;
function isUtc() {
    return this.isValid() ? this._isUTC && this._offset === 0 : false;
}
exports.isUtc = isUtc;
//# sourceMappingURL=offset.js.map