"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const is_function_1 = require("../utils/is-function");
const extend_1 = require("../utils/extend");
const is_object_1 = require("../utils/is-object");
const has_own_prop_1 = require("../utils/has-own-prop");
function set(config) {
    var prop, i;
    for (i in config) {
        prop = config[i];
        if (is_function_1.default(prop)) {
            this[i] = prop;
        }
        else {
            this['_' + i] = prop;
        }
    }
    this._config = config;
    // Lenient ordinal parsing accepts just a number in addition to
    // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
    // TODO: Remove "ordinalParse" fallback in next major release.
    this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
        '|' + (/\d{1,2}/).source);
}
exports.set = set;
function mergeConfigs(parentConfig, childConfig) {
    var res = extend_1.default({}, parentConfig), prop;
    for (prop in childConfig) {
        if (has_own_prop_1.default(childConfig, prop)) {
            if (is_object_1.default(parentConfig[prop]) && is_object_1.default(childConfig[prop])) {
                res[prop] = {};
                extend_1.default(res[prop], parentConfig[prop]);
                extend_1.default(res[prop], childConfig[prop]);
            }
            else if (childConfig[prop] != null) {
                res[prop] = childConfig[prop];
            }
            else {
                delete res[prop];
            }
        }
    }
    for (prop in parentConfig) {
        if (has_own_prop_1.default(parentConfig, prop) &&
            !has_own_prop_1.default(childConfig, prop) &&
            is_object_1.default(parentConfig[prop])) {
            // make sure changes to properties don't modify parent config
            res[prop] = extend_1.default({}, res[prop]);
        }
    }
    return res;
}
exports.mergeConfigs = mergeConfigs;
//# sourceMappingURL=set.js.map