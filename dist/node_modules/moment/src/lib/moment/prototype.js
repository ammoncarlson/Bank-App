"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constructor_1 = require("./constructor");
var proto = constructor_1.Moment.prototype;
const add_subtract_1 = require("./add-subtract");
const calendar_1 = require("./calendar");
const clone_1 = require("./clone");
const compare_1 = require("./compare");
const diff_1 = require("./diff");
const format_1 = require("./format");
const from_1 = require("./from");
const to_1 = require("./to");
const get_set_1 = require("./get-set");
const locale_1 = require("./locale");
const min_max_1 = require("./min-max");
const start_end_of_1 = require("./start-end-of");
const to_type_1 = require("./to-type");
const valid_1 = require("./valid");
const creation_data_1 = require("./creation-data");
proto.add = add_subtract_1.add;
proto.calendar = calendar_1.calendar;
proto.clone = clone_1.clone;
proto.diff = diff_1.diff;
proto.endOf = start_end_of_1.endOf;
proto.format = format_1.format;
proto.from = from_1.from;
proto.fromNow = from_1.fromNow;
proto.to = to_1.to;
proto.toNow = to_1.toNow;
proto.get = get_set_1.stringGet;
proto.invalidAt = valid_1.invalidAt;
proto.isAfter = compare_1.isAfter;
proto.isBefore = compare_1.isBefore;
proto.isBetween = compare_1.isBetween;
proto.isSame = compare_1.isSame;
proto.isSameOrAfter = compare_1.isSameOrAfter;
proto.isSameOrBefore = compare_1.isSameOrBefore;
proto.isValid = valid_1.isValid;
proto.lang = locale_1.lang;
proto.locale = locale_1.locale;
proto.localeData = locale_1.localeData;
proto.max = min_max_1.prototypeMax;
proto.min = min_max_1.prototypeMin;
proto.parsingFlags = valid_1.parsingFlags;
proto.set = get_set_1.stringSet;
proto.startOf = start_end_of_1.startOf;
proto.subtract = add_subtract_1.subtract;
proto.toArray = to_type_1.toArray;
proto.toObject = to_type_1.toObject;
proto.toDate = to_type_1.toDate;
proto.toISOString = format_1.toISOString;
proto.inspect = format_1.inspect;
proto.toJSON = to_type_1.toJSON;
proto.toString = format_1.toString;
proto.unix = to_type_1.unix;
proto.valueOf = to_type_1.valueOf;
proto.creationData = creation_data_1.creationData;
// Year
const year_1 = require("../units/year");
proto.year = year_1.getSetYear;
proto.isLeapYear = year_1.getIsLeapYear;
// Week Year
const week_year_1 = require("../units/week-year");
proto.weekYear = week_year_1.getSetWeekYear;
proto.isoWeekYear = week_year_1.getSetISOWeekYear;
// Quarter
const quarter_1 = require("../units/quarter");
proto.quarter = proto.quarters = quarter_1.getSetQuarter;
// Month
const month_1 = require("../units/month");
proto.month = month_1.getSetMonth;
proto.daysInMonth = month_1.getDaysInMonth;
// Week
const week_1 = require("../units/week");
proto.week = proto.weeks = week_1.getSetWeek;
proto.isoWeek = proto.isoWeeks = week_1.getSetISOWeek;
proto.weeksInYear = week_year_1.getWeeksInYear;
proto.isoWeeksInYear = week_year_1.getISOWeeksInYear;
// Day
const day_of_month_1 = require("../units/day-of-month");
const day_of_week_1 = require("../units/day-of-week");
const day_of_year_1 = require("../units/day-of-year");
proto.date = day_of_month_1.getSetDayOfMonth;
proto.day = proto.days = day_of_week_1.getSetDayOfWeek;
proto.weekday = day_of_week_1.getSetLocaleDayOfWeek;
proto.isoWeekday = day_of_week_1.getSetISODayOfWeek;
proto.dayOfYear = day_of_year_1.getSetDayOfYear;
// Hour
const hour_1 = require("../units/hour");
proto.hour = proto.hours = hour_1.getSetHour;
// Minute
const minute_1 = require("../units/minute");
proto.minute = proto.minutes = minute_1.getSetMinute;
// Second
const second_1 = require("../units/second");
proto.second = proto.seconds = second_1.getSetSecond;
// Millisecond
const millisecond_1 = require("../units/millisecond");
proto.millisecond = proto.milliseconds = millisecond_1.getSetMillisecond;
// Offset
const offset_1 = require("../units/offset");
proto.utcOffset = offset_1.getSetOffset;
proto.utc = offset_1.setOffsetToUTC;
proto.local = offset_1.setOffsetToLocal;
proto.parseZone = offset_1.setOffsetToParsedOffset;
proto.hasAlignedHourOffset = offset_1.hasAlignedHourOffset;
proto.isDST = offset_1.isDaylightSavingTime;
proto.isLocal = offset_1.isLocal;
proto.isUtcOffset = offset_1.isUtcOffset;
proto.isUtc = offset_1.isUtc;
proto.isUTC = offset_1.isUtc;
// Timezone
const timezone_1 = require("../units/timezone");
proto.zoneAbbr = timezone_1.getZoneAbbr;
proto.zoneName = timezone_1.getZoneName;
// Deprecations
const deprecate_1 = require("../utils/deprecate");
proto.dates = deprecate_1.deprecate('dates accessor is deprecated. Use date instead.', day_of_month_1.getSetDayOfMonth);
proto.months = deprecate_1.deprecate('months accessor is deprecated. Use month instead', month_1.getSetMonth);
proto.years = deprecate_1.deprecate('years accessor is deprecated. Use year instead', year_1.getSetYear);
proto.zone = deprecate_1.deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', offset_1.getSetZone);
proto.isDSTShifted = deprecate_1.deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', offset_1.isDaylightSavingTimeShifted);
exports.default = proto;
//# sourceMappingURL=prototype.js.map