"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aliases_1 = require("../units/aliases");
const priorities_1 = require("../units/priorities");
const hooks_1 = require("../utils/hooks");
const is_function_1 = require("../utils/is-function");
const month_1 = require("../units/month");
const year_1 = require("../units/year");
function makeGetSet(unit, keepTime) {
    return function (value) {
        if (value != null) {
            set(this, unit, value);
            hooks_1.hooks.updateOffset(this, keepTime);
            return this;
        }
        else {
            return get(this, unit);
        }
    };
}
exports.makeGetSet = makeGetSet;
function get(mom, unit) {
    return mom.isValid() ?
        mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
}
exports.get = get;
function set(mom, unit, value) {
    if (mom.isValid() && !isNaN(value)) {
        if (unit === 'FullYear' && year_1.isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), month_1.daysInMonth(value, mom.month()));
        }
        else {
            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
        }
    }
}
exports.set = set;
// MOMENTS
function stringGet(units) {
    units = aliases_1.normalizeUnits(units);
    if (is_function_1.default(this[units])) {
        return this[units]();
    }
    return this;
}
exports.stringGet = stringGet;
function stringSet(units, value) {
    if (typeof units === 'object') {
        units = aliases_1.normalizeObjectUnits(units);
        var prioritized = priorities_1.getPrioritizedUnits(units);
        for (var i = 0; i < prioritized.length; i++) {
            this[prioritized[i].unit](units[prioritized[i].unit]);
        }
    }
    else {
        units = aliases_1.normalizeUnits(units);
        if (is_function_1.default(this[units])) {
            return this[units](value);
        }
    }
    return this;
}
exports.stringSet = stringSet;
//# sourceMappingURL=get-set.js.map