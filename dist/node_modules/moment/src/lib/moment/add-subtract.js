"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const get_set_1 = require("./get-set");
const month_1 = require("../units/month");
const create_1 = require("../duration/create");
const deprecate_1 = require("../utils/deprecate");
const hooks_1 = require("../utils/hooks");
const abs_round_1 = require("../utils/abs-round");
// TODO: remove 'name' arg after deprecation is removed
function createAdder(direction, name) {
    return function (val, period) {
        var dur, tmp;
        //invert the arguments, but complain about it
        if (period !== null && !isNaN(+period)) {
            deprecate_1.deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
                'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
            tmp = val;
            val = period;
            period = tmp;
        }
        val = typeof val === 'string' ? +val : val;
        dur = create_1.createDuration(val, period);
        addSubtract(this, dur, direction);
        return this;
    };
}
function addSubtract(mom, duration, isAdding, updateOffset) {
    var milliseconds = duration._milliseconds, days = abs_round_1.default(duration._days), months = abs_round_1.default(duration._months);
    if (!mom.isValid()) {
        // No op
        return;
    }
    updateOffset = updateOffset == null ? true : updateOffset;
    if (months) {
        month_1.setMonth(mom, get_set_1.get(mom, 'Month') + months * isAdding);
    }
    if (days) {
        get_set_1.set(mom, 'Date', get_set_1.get(mom, 'Date') + days * isAdding);
    }
    if (milliseconds) {
        mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
    }
    if (updateOffset) {
        hooks_1.hooks.updateOffset(mom, days || months);
    }
}
exports.addSubtract = addSubtract;
exports.add = createAdder(1, 'add');
exports.subtract = createAdder(-1, 'subtract');
//# sourceMappingURL=add-subtract.js.map