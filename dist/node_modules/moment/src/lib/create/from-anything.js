"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const is_array_1 = require("../utils/is-array");
const is_object_1 = require("../utils/is-object");
const is_object_empty_1 = require("../utils/is-object-empty");
const is_undefined_1 = require("../utils/is-undefined");
const is_number_1 = require("../utils/is-number");
const is_date_1 = require("../utils/is-date");
const map_1 = require("../utils/map");
const valid_1 = require("./valid");
const constructor_1 = require("../moment/constructor");
const locales_1 = require("../locale/locales");
const hooks_1 = require("../utils/hooks");
const check_overflow_1 = require("./check-overflow");
const valid_2 = require("./valid");
const from_string_and_array_1 = require("./from-string-and-array");
const from_string_and_format_1 = require("./from-string-and-format");
const from_string_1 = require("./from-string");
const from_array_1 = require("./from-array");
const from_object_1 = require("./from-object");
function createFromConfig(config) {
    var res = new constructor_1.Moment(check_overflow_1.default(prepareConfig(config)));
    if (res._nextDay) {
        // Adding is smart enough around DST
        res.add(1, 'd');
        res._nextDay = undefined;
    }
    return res;
}
function prepareConfig(config) {
    var input = config._i, format = config._f;
    config._locale = config._locale || locales_1.getLocale(config._l);
    if (input === null || (format === undefined && input === '')) {
        return valid_1.createInvalid({ nullInput: true });
    }
    if (typeof input === 'string') {
        config._i = input = config._locale.preparse(input);
    }
    if (constructor_1.isMoment(input)) {
        return new constructor_1.Moment(check_overflow_1.default(input));
    }
    else if (is_date_1.default(input)) {
        config._d = input;
    }
    else if (is_array_1.default(format)) {
        from_string_and_array_1.configFromStringAndArray(config);
    }
    else if (format) {
        from_string_and_format_1.configFromStringAndFormat(config);
    }
    else {
        configFromInput(config);
    }
    if (!valid_2.isValid(config)) {
        config._d = null;
    }
    return config;
}
exports.prepareConfig = prepareConfig;
function configFromInput(config) {
    var input = config._i;
    if (is_undefined_1.default(input)) {
        config._d = new Date(hooks_1.hooks.now());
    }
    else if (is_date_1.default(input)) {
        config._d = new Date(input.valueOf());
    }
    else if (typeof input === 'string') {
        from_string_1.configFromString(config);
    }
    else if (is_array_1.default(input)) {
        config._a = map_1.default(input.slice(0), function (obj) {
            return parseInt(obj, 10);
        });
        from_array_1.configFromArray(config);
    }
    else if (is_object_1.default(input)) {
        from_object_1.configFromObject(config);
    }
    else if (is_number_1.default(input)) {
        // from milliseconds
        config._d = new Date(input);
    }
    else {
        hooks_1.hooks.createFromInputFallback(config);
    }
}
function createLocalOrUTC(input, format, locale, strict, isUTC) {
    var c = {};
    if (locale === true || locale === false) {
        strict = locale;
        locale = undefined;
    }
    if ((is_object_1.default(input) && is_object_empty_1.default(input)) ||
        (is_array_1.default(input) && input.length === 0)) {
        input = undefined;
    }
    // object construction must be done this way.
    // https://github.com/moment/moment/issues/1423
    c._isAMomentObject = true;
    c._useUTC = c._isUTC = isUTC;
    c._l = locale;
    c._i = input;
    c._f = format;
    c._strict = strict;
    return createFromConfig(c);
}
exports.createLocalOrUTC = createLocalOrUTC;
//# sourceMappingURL=from-anything.js.map